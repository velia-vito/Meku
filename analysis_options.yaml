# See https://dev.to/brunooliveira/measuring-code-quality-with-bettercodehub-5cde for SIG standards

include: package:flutter_lints/flutter.yaml

analyzer:
  plugins:
    - dart_code_metrics

linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - always_put_required_named_parameters_first
    - always_use_package_imports
    - avoid_catches_without_on_clauses
    - avoid_dynamic_calls
    - avoid_empty_else
    - avoid_equals_and_hash_code_on_mutable_classes
    - avoid_escaping_inner_quotes
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_function_literals_in_foreach_calls
    - avoid_implementing_value_types
    - avoid_init_to_null
    - avoid_null_checks_in_equality_operators
    - avoid_positional_boolean_parameters
    - avoid_private_typedef_functions
    - avoid_redundant_argument_values
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_on_closure_parameters
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - await_only_futures
    - cancel_subscriptions
    - cascade_invocations
    - close_sinks
    - combinators_ordering
    - document_ignores
    - flutter_style_todos
    - implicit_reopen
    - library_annotations
    - missing_code_block_language_in_doc_comment
    - missing_whitespace_between_adjacent_strings
    - no_literal_bool_comparisons
    - one_member_abstracts
    - package_api_docs
    - prefer_asserts_in_initializer_lists
    - prefer_asserts_with_message
    - prefer_foreach
    - prefer_mixin
    - prefer_null_aware_method_calls
    - prefer_single_quotes
    - require_trailing_commas
    - sort_pub_dependencies
    - unawaited_futures
    - unnecessary_breaks
    - unnecessary_lambdas
    - unnecessary_parenthesis
    - unnecessary_raw_strings
    - unnecessary_statements
    - unreachable_from_main
    - use_enums

# dart_code_metrics checks (these are based on SIG standards as was found on BetterCodeHub)
dart_code_metrics:
  rules:
    # General
    - arguments-ordering
    - avoid-collection-methods-with-unrelated-types
    - avoid-dynamic
    - avoid-ignoring-return-values
    - avoid-passing-async-when-sync-expected
    - avoid-redundant-async
    - avoid-unnecessary-conditionals
    - double-literal-format
    - member-ordering
    - newline-before-return
    - no-magic-number:
        allowed: [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 360]
        allow-only-once: true
    - prefer-async-await
    - prefer-commenting-analyzer-ignores
    - prefer-conditional-expressions
    - refer-correct-identifier-length:
        max-identifier-length: 20
        min-identifier-length: 4
    - prefer-first
    - prefer-immediate-return
    - prefer-last
    - prefer-match-file-name
    - prefer-static-class

    # Flutter specific
    - always-remove-listener
    - avoid-shrink-wrap-in-lists
    - avoid-unnecessary-setstate
    - use-setstate-synchronously
    - avoid-expanded-as-spacer
    - avoid-wrapping-in-padding
    - check-for-equals-in-render-object-setters
    - consistent-update-render-object
    - prefer-correct-edge-insets-constructor
    - prefer-extracting-callbacks
    - prefer-using-list-view

  metrics:
    source-lines-of-code: 25 # 1. Write short units of code
    cyclomatic-complexity: 7 # 2. Write simple units of code
    number-of-parameters: 4 # 4. Keep unit interfaces small
    halstead-volume: 200 # 8. Keep your codebase small (in terms of details you need to know and understand)

    weight-of-class: 0.5 # ~. General housekeeping
    maximum-nesting-level: 5

    technical-debt:
      threshold: 1
      todo-cost: 1
      ignore-cost: 3
      ignore-for-file-cost: 5
      as-dynamic-cost: 1
      deprecated-annotations-cost: 3
      file-nullsafety-migration-cost: 5
      unit-type: "Hours"